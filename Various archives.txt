----------------------------------------------------------------------------------------

calculation on client side in form: not necessary, seems long to implement
=> to see calculation result, user will have to save and open in Display mode

teaFields.js, displayFields:

  {
    dbFieldName: "pricepergram", //not a DB field, client calulates value
    displayLabel: "Price / gram ($)",
    displayOrder: 10,
    type: "calculation",
    data: "lastpurchasepriceinusdcents/(100*weightingrams)",
    parent: "",
    defaultValue: "",
    mandatory: false
  },

Utils.js, comments:

Special behaviour to implement on client side for specific types:
- "calculation": calculated by client according to formula provided in "data",
  do not send back to server

----------------------------------------------------------------------------------------

utils.js deleted, backup: 
"use strict";

/* 
In the client, the behaviour of a few fields will be harcoded, 
but for other fields, the client will create components dynamically using 
objects in xxxFields.js
*/
/*
objects format:
{
    dbFieldName = field name in DB query result (must be lower case)
    displayLabel = label to use in client ("hidden" if not displayed)
    displayOrder = display order for fields that are not harcoded in client 
    type = data type, like 'integer' or 'date' - see also special types below
    data = external data source (edit mode: dropdown list, display mode: url)
    parent = edit mode only, allow to filter when needed
    default value = edit mode only, prefill empty values
    mandatory = edit mode only, perform check when user submit 
    readonly = edit mode only, not modifiable
}
*/
/* 
Special behaviour to implement on client side for specific types:
- "PK" = primary key, not displayed
- "FK" = foreign key, creates a dropdown list for resource "data", 
  filtered by resource "parent" (optional)
- "currency": stored as an integer but displayed with 2 decimals
  (for baht, we'll use integer as baht cents don't matter much)
- "weight": if > 1000, convert to kilograms (and display unit accordingly)
- "url": to display the fuild, we need to combine 2 entries from server: 
  one with the text of the url and one with the url itself
*/

const createComponents = row => item => ({
  ...item,
  value: row[item.dbFieldName]
});

const createComponentsWithUrl = row => item => {
  if (item.type === "url") {
    const urlField = row[item.data];
    return {
      ...item,
      data: urlField,
      value: row[item.dbFieldName]
    };
  } else {
    return {
      ...item,
      value: row[item.dbFieldName]
    };
  }
};

module.exports = {
  createComponents: createComponents,
  createComponentsWithUrl: createComponentsWithUrl
};

----------------------------------------------------------------------------------------
if Postaman test are aborted:
delete from ordertea where orderid>2;delete from "order" where orderid>2;delete from tea where teaid>2;delete from shop where shopid>2;delete from subtype where subtypeid>10;delete from type where typeid>3;delete from area where areaid>3;delete from country where countryid>3;

----------------------------------------------------------------------------------------
TESTS OrderTea.AmountInGrams

first tea linked to first order and second order
first order:  "2019-09-01"
second order: "2019-09-02"

ordertea for  for first order and  first tea created with 111g
ordertea for  for second order and first tea created with 400g

ordertea for  for first order and  first tea updated with 357g
ordertea for  for second order and first tea updated with 200g

GET a Tea with its most recent OrderTea => 		 expect 200g
GET a Tea with specific OrderTea, first order => expect 357g

delete of second order
GET list of all Teas with filters =>             expect 357g
